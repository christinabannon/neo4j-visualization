{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.uri = 'http://localhost:3000';\n  }\n\n  getAll() {\n    return this.http.get(`${this.uri}/show-all`);\n  } // public newNode():Number {\n  //   // TODO encryption\n  //   let number = -1; \n  //   this.http.get(this.uri + \"/new-node\")\n  //     .subscribe(async data => {\n  //       let jsonString = JSON.stringify(data); \n  //       let jsonData = JSON.parse(jsonString);\n  //       console.log(jsonData.user_id)\n  //       number = jsonData.user_id; \n  //       return number; \n  //     })\n  //   return number; \n  //   // return this.http.get(this.uri + \"/new-node\")\n  //   //return this.http.get(this.uri + \"/new-node\").map((response: Response) => response.text());\n  //   // this.http.get(this.uri + \"/new-node\").pipe(map(data => {})).subscribe(result => {\n  //   //   console.log(result);\n  //   // });\n  // }\n\n\n  newNode() {\n    return this.http.get(this.uri + '/new-node').pipe(map(response => {\n      number: response.number;\n    }));\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/christinabannon/School/Advanced Web Programming/neo-project/client/src/app/config/config.service.ts"],"names":[],"mappings":"AAIA,SAAS,GAAT,QAAoB,gBAApB;;;AAKA,OAAM,MAAO,aAAP,CAAoB;AAIxB,EAAA,WAAA,CAAoB,IAApB,EAAmC;AAAf,SAAA,IAAA,GAAA,IAAA;AAFpB,SAAA,GAAA,GAAM,uBAAN;AAEwC;;AAEjC,EAAA,MAAM,GAAA;AACX,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,GAAG,KAAK,GAAG,WAAzB,CAAP;AACD,GARuB,CAUxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEO,EAAA,OAAO,GAAA;AACZ,WAAO,KAAK,IAAL,CAAU,GAAV,CAAmB,KAAK,GAAL,GAAW,WAA9B,EACN,IADM,CACD,GAAG,CAAC,QAAQ,IAAG;AACjB,MAAA,MAAM,EAAG,QAAQ,CAAC,MAAT;AACV,KAFM,CADF,CAAP;AAKD;;AApCuB;;;mBAAb,a,EAAa,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  uri = 'http://localhost:3000';\n\n  constructor(private http:HttpClient) { }\n\n  public getAll():Observable<any> {\n    return this.http.get(`${this.uri}/show-all`);\n  }\n\n  // public newNode():Number {\n  //   // TODO encryption\n  //   let number = -1; \n  //   this.http.get(this.uri + \"/new-node\")\n  //     .subscribe(async data => {\n  //       let jsonString = JSON.stringify(data); \n  //       let jsonData = JSON.parse(jsonString);\n  //       console.log(jsonData.user_id)\n  //       number = jsonData.user_id; \n  //       return number; \n  //     })\n  //   return number; \n  //   // return this.http.get(this.uri + \"/new-node\")\n\n  //   //return this.http.get(this.uri + \"/new-node\").map((response: Response) => response.text());\n  //   // this.http.get(this.uri + \"/new-node\").pipe(map(data => {})).subscribe(result => {\n  //   //   console.log(result);\n  //   // });\n  // }\n\n  public newNode(): Observable<HttpResponse<any>> {\n    return this.http.get<any>(this.uri + '/new-node')\n    .pipe(map(response => {\n        number : response.number; \n      }\n    ))\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}