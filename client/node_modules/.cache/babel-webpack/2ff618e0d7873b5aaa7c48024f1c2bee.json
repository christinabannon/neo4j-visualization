{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.clientUri = 'localhost:4200';\n    this.serverUri = 'http://localhost:3000';\n  }\n\n  getClientUri() {\n    return this.clientUri;\n  }\n\n  getAll() {\n    return this.http.get(`${this.serverUri}/show-all`);\n  }\n\n  newNode() {\n    // TODO encryption\n    return this.http.get(this.serverUri + \"/new-node\"); // .subscribe(async data => {\n    //   console.log(data)\n    //   localStorage.setItem(\"user_id\", data.user_id);\n    // })\n  }\n\n  getRandom() {\n    return this.http.get('https://www.thecocktaildb.com/api/json/v2/9973533/randomselection.php');\n  }\n\n  saveSelection(greatDrinks, grossDrinks) {// return this.http.post()\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/christinabannon/School/Advanced Web Programming/neo-project/client/src/app/config/config.service.ts"],"names":[],"mappings":";;AAUA,OAAM,MAAO,aAAP,CAAoB;AAKxB,EAAA,WAAA,CAAoB,IAApB,EAAmC;AAAf,SAAA,IAAA,GAAA,IAAA;AAHpB,SAAA,SAAA,GAAY,gBAAZ;AACA,SAAA,SAAA,GAAY,uBAAZ;AAEwC;;AAEjC,EAAA,YAAY,GAAA;AACjB,WAAO,KAAK,SAAZ;AACD;;AAEM,EAAA,MAAM,GAAA;AACX,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,GAAG,KAAK,SAAS,WAA/B,CAAP;AACD;;AAEM,EAAA,OAAO,GAAA;AACZ;AACA,WAAO,KAAK,IAAL,CAAU,GAAV,CAAmB,KAAK,SAAL,GAAiB,WAApC,CAAP,CAFY,CAGV;AACA;AACA;AACA;AACH;;AAEM,EAAA,SAAS,GAAA;AACd,WAAO,KAAK,IAAL,CAAU,GAAV,CAAmB,uEAAnB,CAAP;AACD;;AAEM,EAAA,aAAa,CAAC,WAAD,EAAwB,WAAxB,EAA8C,CAChE;AACD;;AA9BuB;;;mBAAb,a,EAAa,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\nimport { Drink } from '../config/drink'; \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  clientUri = 'localhost:4200';\n  serverUri = 'http://localhost:3000';\n\n  constructor(private http:HttpClient) { }\n\n  public getClientUri():string {\n    return this.clientUri; \n  }\n\n  public getAll():Observable<any> {\n    return this.http.get(`${this.serverUri}/show-all`);\n  }\n\n  public newNode() : Observable<any>{\n    // TODO encryption\n    return this.http.get<any>(this.serverUri + \"/new-node\")\n      // .subscribe(async data => {\n      //   console.log(data)\n      //   localStorage.setItem(\"user_id\", data.user_id);\n      // })\n  }\n\n  public getRandom(): Observable<any> {\n    return this.http.get<any>('https://www.thecocktaildb.com/api/json/v2/9973533/randomselection.php')\n  }\n\n  public saveSelection(greatDrinks : Drink[], grossDrinks : Drink []) {\n    // return this.http.post()\n  }\n\n  // public newNode():Number {\n  //   // TODO encryption\n  //   let number = -1; \n  //   this.http.get(this.uri + \"/new-node\")\n  //     .subscribe(async data => {\n  //       let jsonString = JSON.stringify(data); \n  //       let jsonData = JSON.parse(jsonString);\n  //       console.log(jsonData.user_id)\n  //       number = jsonData.user_id; \n  //       return number; \n  //     })\n    \n    // return this.http.get(this.uri + \"/new-node\")\n\n    //return this.http.get(this.uri + \"/new-node\").map((response: Response) => response.text());\n    // this.http.get(this.uri + \"/new-node\").pipe(map(data => {})).subscribe(result => {\n    //   console.log(result);\n    // });\n  //}\n\n  // public newNode(): Observable<HttpResponse<any>> {\n  //   return this.http.get<any>(this.uri + '/new-node')\n  //   .pipe(map(response => {\n  //       return {\n  //         body: response.body, \n  //         headers: response.headers\n  //       } as HttpResponse<any>;\n  //     }\n  //   ))\n  // }\\\n\n  // public newNode(): {\n  //   this.http.get(this.uri + '/new-node')\n  // }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}