{"ast":null,"code":"import _asyncToGenerator from \"/Users/christinabannon/School/Advanced Web Programming/neo-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.uri = 'http://localhost:3000';\n  }\n\n  getAll() {\n    return this.http.get(`${this.uri}/show-all`);\n  }\n\n  newNode() {\n    // TODO encryption\n    let number = -1;\n    this.http.get(this.uri + \"/new-node\").subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (data) {\n        let jsonData = JSON.stringify(data);\n        console.log(jsonData.user_id);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()); // return this.http.get(this.uri + \"/new-node\")\n    //return this.http.get(this.uri + \"/new-node\").map((response: Response) => response.text());\n    // this.http.get(this.uri + \"/new-node\").pipe(map(data => {})).subscribe(result => {\n    //   console.log(result);\n    // });\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/christinabannon/School/Advanced Web Programming/neo-project/client/src/app/config/config.service.ts"],"names":[],"mappings":";;;AASA,OAAM,MAAO,aAAP,CAAoB;AAIxB,EAAA,WAAA,CAAoB,IAApB,EAAmC;AAAf,SAAA,IAAA,GAAA,IAAA;AAFpB,SAAA,GAAA,GAAM,uBAAN;AAEwC;;AAEjC,EAAA,MAAM,GAAA;AACX,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,GAAG,KAAK,GAAG,WAAzB,CAAP;AACD;;AAEM,EAAA,OAAO,GAAA;AACZ;AACA,QAAI,MAAM,GAAG,CAAC,CAAd;AACA,SAAK,IAAL,CAAU,GAAV,CAAc,KAAK,GAAL,GAAW,WAAzB,EACG,SADH;AAAA,mCACa,WAAM,IAAN,EAAa;AACtB,YAAI,QAAQ,GAAG,IAAI,CAAC,SAAL,CAAe,IAAf,CAAf;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,OAArB;AACD,OAJH;;AAAA;AAAA;AAAA;AAAA,SAHY,CAQZ;AAEA;AACA;AACA;AACA;AACD;;AAxBuB;;;mBAAb,a,EAAa,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  uri = 'http://localhost:3000';\n\n  constructor(private http:HttpClient) { }\n\n  public getAll():Observable<any> {\n    return this.http.get(`${this.uri}/show-all`);\n  }\n\n  public newNode(){\n    // TODO encryption\n    let number = -1; \n    this.http.get(this.uri + \"/new-node\")\n      .subscribe(async data => {\n        let jsonData = JSON.stringify(data); \n        console.log(jsonData.user_id)\n      })\n    // return this.http.get(this.uri + \"/new-node\")\n\n    //return this.http.get(this.uri + \"/new-node\").map((response: Response) => response.text());\n    // this.http.get(this.uri + \"/new-node\").pipe(map(data => {})).subscribe(result => {\n    //   console.log(result);\n    // });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}